{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAkEA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,OA1EM,CACXQ,KAAMC,SAASC,cAAc,WAI1BF,KAAKG,iBAAiB,UAGuB,SAA1BC,GAEsBA,EAAxCC,iBAG+C,IAAnBC,GAUTN,EAVyBI,EAAIG,cAW9CC,EAAW,IAAIC,SAAST,GAExBU,EAAa,GACnBF,EAASG,SAAQ,SAACC,EAAOC,GACvBH,EAAWG,GAAQC,OAAOF,MAGrBF,GAlBClB,EAAwBc,EAAxBd,MAAOuB,EAAiBT,EAAjBS,KAAMC,EAAWV,EAAXU,OAU6B,IAA3BhB,EACjBQ,EAEAE,GAwB4C,YAAzBO,UAAAC,OAAA,YAAAD,UAAA,GAAeA,UAAA,GAAF,IACpBE,KAAI,SAAAC,G,OAE6D9B,EAFlD8B,EAAR7B,SAAe6B,EAAL5B,OAG9B6B,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MACjBJ,EAAAmC,OAAOC,QAAQ,qBAAoCC,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,UAE1DkC,OAAM,SAAAJ,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MAClBJ,EAAAmC,OAAOI,QAAQ,oBAAmCF,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,aAvClBoC,CAgBuB,SAAvCpC,EAAOuB,EAAMC,GAGzC,IAFA,IAAMa,EAAqB,GAElBC,EAAI,EAAGA,EAAId,EAAQc,GAAK,EAAG,CAClC,IAAMC,EAAevC,EAAQsC,EAAIf,EAC3BiB,EAAwB,GAC9BA,EAAsBzC,SAAWuC,EAAI,EACrCE,EAAsBxC,MAAQuC,EAC9BF,EAAmBI,KAAKD,GAG1B,OAAOH,EA9ByBK,CAAqB1C,EAAOuB,EAAMC,O","sources":["src/js/03-promises.js"],"sourcesContent":["// імпортуємо бібліотеку notiflix для сповіщень\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\n// додаємо слухача на форму\nrefs.form.addEventListener('submit', createPromises);\n\n// загальна функція, яка викликається при відправленні форми\nfunction createPromises(evt) {\n  // скидаємо налаштування (перезавантаження сторінки)\n  evt.preventDefault();\n\n  // отримуємо в об'єкті та деструктуризуємо в змінні дані з форми\n  const { delay, step, amount } = getDataFromForm(evt.currentTarget);\n\n  // обчислюємо вихідні дані для кожного проміса\n  const dataArrayForEachPromise = calculatePromiseData(delay, step, amount);\n\n  // створюємо проміси за обчисленими вихідними даними\n  createAllPromises(dataArrayForEachPromise);\n}\n\n// функція, яка забирає з форми дані і повертає їх у вигляді об'єкта\nfunction getDataFromForm(form) {\n  const formData = new FormData(form);\n\n  const dataObject = {};\n  formData.forEach((value, name) => {\n    dataObject[name] = Number(value);\n  });\n\n  return dataObject;\n}\n\n// функція, яка обчислює вихідні дані для кожного проміса (в об'єкті) і поміщає їх в масив\nfunction calculatePromiseData(delay, step, amount) {\n  const dataArrayForCreate = [];\n\n  for (let i = 0; i < amount; i += 1) {\n    const delayForEach = delay + i * step;\n    const dataObjForEachPromise = {};\n    dataObjForEachPromise.position = i + 1;\n    dataObjForEachPromise.delay = delayForEach;\n    dataArrayForCreate.push(dataObjForEachPromise);\n  }\n\n  return dataArrayForCreate;\n}\n\n// функція, яка створює проміси за обчисленими вихідними даними\nfunction createAllPromises(arrayOfObj = []) {\n  return arrayOfObj.map(({ position, delay }) =>\n    // створюємо проміс для кожного елемента масива, викликаючи функцію для створення одного проміса:\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      })\n  );\n}\n\n// функція, яка створює один проміс за вихідними даними\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","form","document","querySelector","addEventListener","evt","preventDefault","ref","currentTarget","formData","FormData","dataObject","forEach","value","name","Number","step","amount","arguments","length","map","param1","then","param","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createAllPromises","dataArrayForCreate","i","delayForEach","dataObjForEachPromise","push","$ce04d3a99e08e73b$var$calculatePromiseData"],"version":3,"file":"03-promises.4ac4c76d.js.map"}